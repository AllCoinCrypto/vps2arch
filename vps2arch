#!/bin/sh

# Copyright 2015, Timothy Redaelli <tredaelli@archlinux.info>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License at <http://www.gnu.org/licenses/> for
# more details.

set -e

# Gathering informations about actual environment.
if command -v wget >/dev/null 2>&1; then
	_download() { wget -O- "$@" ; }
elif command -v curl >/dev/null 2>&1; then
	_download() { curl -fL "$@" ; }
else
	echo "This script needs curl or wget" >&2
	exit 2
fi

cpu_type=$(uname -m)

is_openvz() { [ -d /proc/vz -a ! -d /proc/bc ]; }

download() {
	local path="$1" x=
	shift
	for x in $mirrors; do
		_download "$x/$path" && return 0
	done
	return 1
}

download_and_extract_bootstrap() {
	local sha1 filename
	download iso/latest/sha1sums.txt | fgrep "$cpu_type.tar.gz" > "sha1sums.txt"
	read -r sha1 filename < "sha1sums.txt"
	download "iso/latest/$filename" > "$filename"
	sha1sum -c sha1sums.txt || exit 1
	tar -xpzf "$filename"
	rm -f "$filename"
	cp -L /etc/resolv.conf "/root.$cpu_type/etc"
	mount --rbind /dev "/root.$cpu_type/dev"
	mount -t proc proc "/root.$cpu_type/proc"
	mount -t sysfs sys "/root.$cpu_type/sys"
	# FIXME support multiple partitions
	mount --bind / "/root.$cpu_type/mnt"
	findmnt /boot >/dev/null && mount --bind /boot "/root.$cpu_type/mnt/boot"
	# Workaround for Debian
	mkdir -p "/root.$cpu_type/run/shm"
}

chroot_exec() {
	chroot "/root.$cpu_type" /bin/bash -c "$*"
}

configure_chroot() {
	local m
	for m in $mirrors; do
		echo 'Server = '"$m"'/$repo/os/$arch'
	done >> "/root.$cpu_type/etc/pacman.d/mirrorlist"
	# Install and initialize haveged if needed
	if ! pidof haveged >/dev/null; then
		# Disable signature check, install and launch haveged and re-enable signature checks.
		sed -i.bak "s/^[[:space:]]*SigLevel[[:space:]]*=.*$/SigLevel = Never/" "/root.$cpu_type/etc/pacman.conf"
		chroot_exec 'pacman --noconfirm -Sy haveged && haveged'
		mv "/root.$cpu_type/etc/pacman.conf.bak" "/root.$cpu_type/etc/pacman.conf"
	fi
	chroot_exec 'pacman-key --init && pacman-key --populate archlinux'

	# Generate fstab
	chroot_exec 'genfstab /mnt >> /etc/fstab'
}

save_root_pass() {
	grep '^root:' /etc/shadow > "/root.$cpu_type/root.passwd"
	chmod 0600 "/root.$cpu_type/root.passwd"
}

download_and_install_busybox() {
	chroot_exec 'pacman --noconfirm -Sy busybox'
}

delete_all() {
	# Delete *all* files from /
	find / \( ! -path '/dev/*' -and ! -path '/proc/*' -and ! -path '/sys/*' -and ! -path '/selinux/*' -and ! -path "/root.$cpu_type/*" \) -delete 2>/dev/null || true
}

install_packages() {
	local packages="base grub openssh"
	# You can't use chroot_exec here, because the root filesystem was deleted!
	"/root.$cpu_type/usr/bin/busybox" chroot "/root.$cpu_type" /usr/bin/pacstrap -M /mnt $packages
	cp -L "/root.$cpu_type/etc/resolv.conf" /etc
}

restore_root_pass() {
	# If the root password is not set, use vps2arch
	if egrep -q '^root:.?:' "/root.$cpu_type/root.passwd"; then
		echo "root:vps2arch" | chpasswd
	else
		sed -i '/^root:/d' /etc/shadow
		cat "/root.$cpu_type/root.passwd" >> /etc/shadow
	fi
}

cleanup() {
	mv "/root.$cpu_type/etc/fstab" "/etc/fstab"
	awk "/\/root.$cpu_type/ {print \$2}" /proc/mounts | sort -r | xargs umount -nl || true
	rm -rf "/root.$cpu_type/"
}

configure_bootloader() {
	local root_dev=$(findmnt -no SOURCE /) root_devs= tmp= needs_lvm2=0
	case $root_dev in
	/dev/mapper/*) needs_lvm2=1 ;;
	esac

	# If you are still using eth* as interface name, disable "strange" ifnames
	if grep -q '^[[:space:]]*eth' /proc/net/dev; then
		sed -i.bak 's/GRUB_CMDLINE_LINUX_DEFAULT="/&net.ifnames=0 /' /etc/default/grub
	fi

	if [ $needs_lvm2 -eq 1 ]; then
		local vg
		# Some distro doesn't use lvmetad by default
		sed -i.bak 's/use_lvmetad = 1/use_lvmetad = 0/g' /etc/lvm/lvm.conf
		vg=$(lvs --noheadings $root_dev | awk '{print $2}')
		root_dev=$(pvs --noheadings | awk -v vg="$vg" '($2 == vg) { print $1 }')
	fi
	for root_dev in $root_dev; do
		tmp=$(lsblk -npsro NAME "$root_dev" | tail -n1)
		case " $root_devs " in
		*" $tmp "*) 	;;
		*)		root_devs="${root_devs:+$root_devs }$tmp"	;;
		esac
	done
	grub-mkconfig > /boot/grub/grub.cfg
	for root_dev in $root_devs; do
		grub-install --target=i386-pc --recheck --force "$root_dev"
	done

	if [ $needs_lvm2 -eq 1 ]; then
		mv /etc/lvm/lvm.conf.bak /etc/lvm/lvm.conf
		sed -i '/HOOKS/s/block/& lvm2/' /etc/mkinitcpio.conf
		mkinitcpio -p linux
	fi
}

configure_network() {
	local gateway dev ip

	read -r _ _ gateway _ dev _ <<-EOF
		$(ip route show 0.0.0.0/0)
	EOF

	ip=$(ip addr show dev "$dev" | awk '($1 == "inet") { print $2 }')

	cat > /etc/systemd/network/default.network <<-EOF
		[Match]
		Name=$dev

		[Address]
		Address=$ip

		[Route]
		Gateway=$gateway
	EOF

	systemctl enable systemd-networkd sshd
}

finalize() {
	cat <<-EOF
		Hi,
		your VM has successfully been reimaged with Arch Linux.

		This script configured grub as bootloader and systemd-networkd for networking.

		When you are finished with your post-installation, you'll need to reboot the VM the rough way:
		# sync ; reboot -f

		Then you'll be able to connect to your VM using SSH and to login using your old root password (or "vps2arch" if you didn't have a root password).

		You'll need to configure your mirrors in order to use pacman, please see https://wiki.archlinux.org/index.php/Mirrors
	EOF
}

mirrors=

while getopts ":m:h" opt; do
	case $opt in
	m)
		mirrors="${mirrors:+$mirrors }$OPTARG"
		;;
	h)
		cat <<-EOF
			usage: ${0##*/} [options]

			  Options:
			    -m mirror                    Use the provided mirror (you can specify this option more than once).

			    -h                           Print this help message
		EOF
		exit 0
		;;
	:)
		printf "%s: option requires an argument -- '%s'\n" "${0##*/}" "$OPTARG" >&2
		exit 1
		;;
	?)
		printf "%s: invalid option -- '%s'\n" "${0##*/}" "$OPTARG" >&2
		exit 1
		;;
	esac
done
shift $((OPTIND - 1))

: ${mirrors:="http://mirror.rackspace.com/archlinux http://dgix.ru/mirrors/archlinux"}

cd /
download_and_extract_bootstrap
configure_chroot
save_root_pass
download_and_install_busybox
delete_all
install_packages
restore_root_pass
cleanup
configure_bootloader
configure_network
finalize
